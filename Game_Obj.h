#pragma once//директива обеспечивает подключение
//данного заголовочного файла только один раз

#include <DarkGDK.h>//главный заголовочный файл 
//библиотеки Dark GDK

#include <MikeNet.h>//заголовочный файл сетевой 
//библиотеки

// параметры дисплея
const int ScreenWidth = 1024, // ширина
          ScreenHeight = 768, // высота
		  ScreenBitDepth = 32; // глубина цвета

// константы представляющие внутренние (числовые)
//имена объектов игры
const int myrobot = 1;//пользовательский робот
const int terrain = 2, skybox = 3; // объекты
const int basetex = 1, dettex = 2, 
DarkRobot_Loading = 3, win_screen = 4, 
death_screen = 5; // текстуры

const int count = 4;//кол-во врагов
const int rob_num[count] = {4, 5, 6, 7};
//роботы-враги

const int myrocket = 8;//пользвательская ракета
const int rock_num[count] = {9,10,11,12};//ракеты: 
//одновреммено могут существовать [кол-во врагов] 
//ракет;
//т.к. робот вновь может выстрелить только тогда,
//когда ракета будет уничтожена

const int fire = 13;//частица огня

// взрывы-частицы представляют собой другой тип 
//объектов, поэтому они отличны от других типов 
//объектов и их нумерацию можно начинать с единицы
const int exp_num[count+1] = {1,2,3,4,5};//взрывы:
//одновременно могут существовать
//[количество вражеских ракет + пользовательская ракета]
//взрывов, но практически такое вряд ли случится, 
//но мы обязаны предусмотреть всё

//константы для звуков;
//поскольку звуки представляются в библиотеке 
//совершенно другим типом объектов,
//то их нумерацию можно начать с единицы
const int GameSound = 1, // основной звук игры - 
//воспроизводится всё время в процессе игры
LevelComplete = 2, // звук будет воспроизведён во 
//время победы
GameOver = 3, // звук будет воспроизведён во время 
//поражения
RobotShort = 4, // звук будет воспроизведён во 
//время выстрела робота
RocketExplode = 5, // звук будет воспроизведён 
//во время уничтожения ракеты
RobotExplode = 6; // звук будет воспроизведён
//во время взрыва робота

// абстрактный супер-класс для всех объектов игры
class GameObj
{
protected:
float Xpos, Ypos, Zpos;// координаты
float Ydeg;// переменная, содержащая угол поворота
int num;//переменная для хранения номера объекта;
bool alive, burn; // жив или мёртв; горит или нет;
DWORD start_time;//хранит время начала жизни
public:
int GetNum() { return num; };//встраиваемые функции,
//работают одинаково во всех производных классах

bool GetAlive() { return alive; }//получаем 
//состояние существования: да или нет

bool GetBurn() { return burn; }// получаем 
//состояние горения

void SetBurn(bool b) { burn = b; }// устанавливаем 
//состояние горение

float GetXpos() { return Xpos; }//встраиваемые
//функции 
float GetYpos() { return Ypos; }
//возврата значения
float GetZpos() { return Zpos; }
//работают одинаково  
float GetDegree() { return Ydeg; }
//во всех классах-потомках;
virtual void Draw() {};//виртуальная функция - 
//переопределяется в каждом классе-потомке
virtual void PlaySound() {};//виртуальная функция -
//переопределяется или не используется вообще в 
//классах-потомках

//virtual void Die() = 0 {}; // чисто виртуальная 
//(абстрактная) функция используется во всех 
//классах-потомках с неизменным прототипом, меняется
//только тело функции
virtual void Die() {};//--уже не чисто виртуальная 
//функция, так как в классе роботов имеет изменения
//в прототипе (добавлен параметр)
virtual ~GameObj() = 0 { }; // чисто виртуальный 
//деструктор
};